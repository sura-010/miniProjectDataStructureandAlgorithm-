const express = require("express");
const pool = require("../db"); // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ database connection
const router = express.Router();

router.post("/post", async (req, res) => {
  try {
    const {
      fname,
      lname,
      national_id,
      birth_date: birthDateString,
      income,
      occupation,
    } = req.body;

    if (
      !fname ||
      !lname ||
      !national_id ||
      !birthDateString ||
      !income ||
      !occupation
    ) {
      return res.status(400).json({ message: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" });
    }

    const birth_date = new Date(birthDateString);
    if (isNaN(birth_date.getTime())) {
      return res.status(400).json({ message: "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }

    const age = calculateAge(birth_date);
    if (age < 18 || age > 99) {
      return res
        .status(400)
        .json({ message: "‡∏≠‡∏≤‡∏¢‡∏∏‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 18 - 99 ‡∏õ‡∏µ" });
    }

    if (income < 0) {
      return res
        .status(400)
        .json({ message: "‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö 0" });
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ `national_id` ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const existingCitizen = await pool.query(
      `SELECT * FROM citizens WHERE national_id = $1`,
      [national_id]
    );

    if (existingCitizen.rowCount > 0) {
      return res
        .status(400)
        .json({ message: "‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß" });
    }

    // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
    let target_group_id;
    if (age >= 60 ) {
      target_group_id = 1;
    } else if (age < 60 && income < 9000) {
      target_group_id = 2;
    } else if (occupation === "‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£" ) {
      target_group_id = 3;
    } else {
      target_group_id = 4;
    }

    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô
    const newCitizen = await pool.query(
      `INSERT INTO citizens (fname, lname, national_id, birth_date, age, income, occupation, target_group_id)
           VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING *`,
      [
        fname,
        lname,
        national_id,
        birth_date,
        age,
        income,
        occupation,
        target_group_id,
      ]
    );

    const citizen = newCitizen.rows[0];

    // ‚úÖ ‡∏î‡∏∂‡∏á allocation_id ‡∏à‡∏≤‡∏Å AllocationRatio
    const allocationResult = await pool.query(
      `SELECT id AS allocation_id, allocated_amount, max_recipients FROM AllocationRatio 
       WHERE target_group_id = $1 LIMIT 1`,
      [target_group_id]
    );

    if (allocationResult.rowCount > 0) {
      const { allocation_id, allocated_amount, max_recipients } =
        allocationResult.rows[0];

      if (!allocation_id) {
        return res
          .status(400)
          .json({ message: "‡πÑ‡∏°‡πà‡∏°‡∏µ allocation_id ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö target_group_id" });
      }

      console.log("üéØ allocation_id:", allocation_id);

      // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
      const amount_per_person = allocated_amount / max_recipients;

      // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Transaction
      const transactionResult = await pool.query(
        `INSERT INTO Transaction (citizen_id, amount, transaction_date, status, queue_order, allocation_id)
         VALUES ($1, $2, NOW(), 'pending', 
                (SELECT COALESCE(MAX(queue_order), 0) + 1 FROM Transaction), $3)
         RETURNING *`,
        [citizen.citizen_id, amount_per_person, allocation_id]
      );

      transaction = transactionResult.rows[0];
    }

    res.json({
      message: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      citizen,
      transaction: transaction || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ",
    });
  } catch (err) {
    console.error("INSERT Error:", err.message);
    res.status(500).json({ error: "Server Error", details: err.message });
  }
});

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏≤‡∏¢‡∏∏
function calculateAge(birth_date) {
  const birthDate = new Date(birth_date);
  const today = new Date();
  let age = today.getFullYear() - birthDate.getFullYear();
  const monthDiff = today.getMonth() - birthDate.getMonth();
  if (
    monthDiff < 0 ||
    (monthDiff === 0 && today.getDate() < birthDate.getDate())
  ) {
    age--;
  }
  return age;
}

router.get("/check-target", async (req, res) => {
  try {
    const citizenQuery = `
      SELECT c.national_id, c.citizen_id, c.fname, c.lname, c.birth_date, 
             c.age, c.income, c.occupation, tg.name AS target_group, 
             fds.distribution_date
      FROM Citizens c
      LEFT JOIN TargetGroup tg ON c.target_group_id = tg.target_group_id
      LEFT JOIN FundDistributionSchedule fds ON tg.target_group_id = fds.target_group_id
      ORDER BY c.created_at DESC;
    `;

    const { rows } = await pool.query(citizenQuery);

    // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏ó‡∏ô
    res.status(200).json(rows);
  } catch (error) {
    console.error("‚ùå Error checking target group:", error.message);
    res
      .status(500)
      .json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö", error: error.message });
  }
});

// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô + ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
router.put("/update/:id", async (req, res) => {
  try {
    const { id } = req.params;
    let { fname, lname, birth_date, income, occupation } = req.body;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ citizen_id ‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const checkCitizen = await pool.query(
      `SELECT * FROM citizens WHERE citizen_id = $1`,
      [id]
    );

    if (checkCitizen.rowCount === 0) {
      return res
        .status(404)
        .json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç" });
    }

    // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å birth_date
    birth_date = new Date(birth_date);
    if (isNaN(birth_date.getTime())) {
      return res.status(400).json({ message: "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }
    const age = calculateAge(birth_date);

    // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà
    let target_group_id = null;

    // üîπ 1Ô∏è‚É£ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ
    const groupQuery = await pool.query(
      `SELECT target_group_id FROM TargetGroup 
      WHERE age_min <= $1 AND age_max >= $1 
      AND income_range_min <= $2 AND income_range_max >= $2 
      LIMIT 1`,
      [age, income]
    );

    if (groupQuery.rowCount > 0) {
      target_group_id = groupQuery.rows[0].target_group_id;
    }

    // üîπ 2Ô∏è‚É£ ‡∏ñ‡πâ‡∏≤ occupation ‡πÄ‡∏õ‡πá‡∏ô "‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£" ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ target group ‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î target_group_id = 3
    if (!target_group_id && occupation.includes("‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£")) {
      target_group_id = 3;
    }
    if (!target_group_id && !occupation.includes("‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£")) {
      target_group_id = 4;
    }

    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const result = await pool.query(
      `UPDATE citizens 
      SET fname = $1, lname = $2, birth_date = $3, age = $4, income = $5, occupation = $6, target_group_id = $7
      WHERE citizen_id = $8 RETURNING *`,
      [fname, lname, birth_date, age, income, occupation, target_group_id, id]
    );

    res.json({ message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", updatedCitizen: result.rows[0] });
  } catch (err) {
    console.error("UPDATE Error:", err.message);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" });
  }
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏≤‡∏¢‡∏∏
function calculateAge(birth_date) {
  const birthDate = new Date(birth_date);
  const today = new Date();
  let age = today.getFullYear() - birthDate.getFullYear();
  const monthDiff = today.getMonth() - birthDate.getMonth();
  if (
    monthDiff < 0 ||
    (monthDiff === 0 && today.getDate() < birthDate.getDate())
  ) {
    age--;
  }
  return age;
}

router.get("/check-target/:national_id", async (req, res) => {
  const { national_id } = req.params;

  try {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏à‡∏≤‡∏Å‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£
    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô + ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ + ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°
    const citizenQuery = `
SELECT c.fname, c.lname, c.birth_date, c.age, c.income, c.occupation, 
       tg.name AS target_group, fds.distribution_date,
       t.amount, t.transaction_date, t.status 
FROM Citizens c
LEFT JOIN TargetGroup tg ON c.target_group_id = tg.target_group_id
LEFT JOIN FundDistributionSchedule fds ON tg.target_group_id = fds.target_group_id
LEFT JOIN Transaction t ON c.citizen_id = t.citizen_id  -- ‚úÖ JOIN Transaction
WHERE c.national_id = $1
ORDER BY t.transaction_date DESC LIMIT 1; -- ‚úÖ ‡∏î‡∏∂‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
`;

    const { rows } = await pool.query(citizenQuery, [national_id]);

    if (rows.length === 0) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô" });
    }

    let citizenData = rows[0];

    // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î ‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
    if (citizenData.birth_date) {
      citizenData.birth_date = new Date(citizenData.birth_date)
        .toISOString()
        .split("T")[0]; // YYYY-MM-DD
    }

    if (citizenData.distribution_date) {
      citizenData.distribution_date = new Date(
        citizenData.distribution_date
      ).toLocaleDateString("th-TH", {
        year: "numeric",
        month: "long",
        day: "numeric",
      }); // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô "1 ‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏° 2024"
    }

    res.json(citizenData);
  } catch (error) {
    console.error("‚ùå Error checking target group:", error);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö" });
  }
});

// API ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô
router.delete("/delete/:id", async (req, res) => {
  try {
    const { id } = req.params;

    const result = await pool.query(
      "DELETE FROM citizens WHERE citizen_id = $1 RETURNING *",
      [id]
    );

    if (result.rowCount === 0) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö" });
    }

    res.json({ message: "‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", deletedCitizen: result.rows[0] });
  } catch (err) {
    console.error("DELETE Error:", err.message);
    res.status(500).send("Server Error");
  }
});
// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô
router.put("/update/:id", async (req, res) => {
  try {
    const { id } = req.params;
    const { fname, lname, birth_date, income, occupation } = req.body;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ citizen_id ‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const checkCitizen = await pool.query(
      `SELECT * FROM citizens WHERE citizen_id = $1`,
      [id]
    );

    if (checkCitizen.rowCount === 0) {
      return res
        .status(404)
        .json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç" });
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const result = await pool.query(
      `UPDATE citizens 
      SET fname = $1, lname = $2, birth_date = $3, income = $4, occupation = $5
      WHERE citizen_id = $6 RETURNING *`,
      [fname, lname, birth_date, income, occupation, id]
    );

    res.json({ message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", updatedCitizen: result.rows[0] });
  } catch (err) {
    console.error("UPDATE Error:", err.message);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" });
  }
});
router.post("/generate-users", async (req, res) => {
  try {
    const { count } = req.body;
    if (!count || count < 1)
      return res.status(400).json({ error: "‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!" });

    const fakeUsers = [];
    const transactions = [];
    const batchSize = 500; // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô insert ‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏ö
    const insertedUsers = [];

    for (let i = 0; i < count; i++) {
      // ‚úÖ ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å 5000000000000)
      const national_id = Math.floor(
        5000000000000 + Math.random() * 4999999999999
      ).toString();

      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const existingCitizen = await pool.query(
        `SELECT national_id FROM citizens WHERE national_id = $1`,
        [national_id]
      );
      if (existingCitizen.rowCount > 0) {
        i--; // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏Ç‡∏ã‡πâ‡∏≥ ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
        continue;
      }

      // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏õ‡πá‡∏ô `User1`, `User2`
      const fname = `User${i + 1}`;
      const lname = "Test";

      // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î
      let birth_date = "1980-01-01";
      const age = Math.floor(Math.random() * 83) + 18;

      // ‚úÖ ‡∏™‡∏∏‡πà‡∏°‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 10000 - 50000 ‡∏ö‡∏≤‡∏ó
      const income = Math.floor(Math.random() * 30000) + 5000;

      // ‚úÖ ‡∏™‡∏∏‡πà‡∏°‡∏≠‡∏≤‡∏ä‡∏µ‡∏û
      const occupations = ["‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£", "‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô", "‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£", "‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß"];
      const occupation =
        occupations[Math.floor(Math.random() * occupations.length)];

      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
      let target_group_id;
      if (age >= 60 ) {
        target_group_id = 1; // ‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏
      } else if (income < 9000) {
        target_group_id = 2; // ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ô‡πâ‡∏≠‡∏¢
      } else if (occupation === "‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£") {
        target_group_id = 3; // ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£
      } else {
        target_group_id = 4; // ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå
      }

      // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏≠‡∏≤‡πÄ‡∏£‡∏¢‡πå
      fakeUsers.push([
        national_id,
        fname,
        lname,
        birth_date,
        age,
        income,
        occupation,
        target_group_id,
      ]);

      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å AllocationRatio
      const allocationResult = await pool.query(
        `SELECT id AS allocation_id, allocated_amount, max_recipients FROM AllocationRatio 
               WHERE target_group_id = $1 LIMIT 1`,
        [target_group_id]
      );

      let transactionData = null;
      if (allocationResult.rowCount > 0) {
        const { allocation_id, allocated_amount, max_recipients } =
          allocationResult.rows[0];

        // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
        const amount_per_person = allocated_amount / max_recipients;

        // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô
        transactionData = [amount_per_person, allocation_id];
        transactions.push(transactionData);
      }

      insertedUsers.push({
        national_id,
        fname,
        lname,
        birth_date,
        age,
        income,
        occupation,
        target_group_id,
        transaction: transactionData
          ? { amount: transactionData[0], allocation_id: transactionData[1] }
          : "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ",
      });

      // ‚úÖ ‡∏ó‡∏∏‡∏Å ‡πÜ `batchSize` ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÉ‡∏´‡πâ insert ‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      if (fakeUsers.length >= batchSize || i === count - 1) {
        const insertCitizensQuery = `
                  INSERT INTO citizens (national_id, fname, lname, birth_date, age, income, occupation, target_group_id, created_at)
                  VALUES ${fakeUsers
                    .map(
                      (_, i) =>
                        `($${i * 8 + 1}, $${i * 8 + 2}, $${i * 8 + 3}, $${
                          i * 8 + 4
                        }::DATE, $${i * 8 + 5}::INTEGER, $${
                          i * 8 + 6
                        }::NUMERIC, $${i * 8 + 7}::VARCHAR, $${
                          i * 8 + 8
                        }::INTEGER, NOW())`
                    )
                    .join(", ")}
                  RETURNING citizen_id, target_group_id`;

        const insertedCitizens = await pool.query(
          insertCitizensQuery,
          fakeUsers.flat()
        );

        // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Transaction
        for (let j = 0; j < insertedCitizens.rows.length; j++) {
          const citizen_id = insertedCitizens.rows[j].citizen_id;
          const transactionData = transactions[j];

          if (transactionData) {
            await pool.query(
              `INSERT INTO Transaction (citizen_id, amount, transaction_date, status, queue_order, allocation_id)
                           VALUES ($1, $2, NOW(), 'pending', 
                                  (SELECT COALESCE(MAX(queue_order), 0) + 1 FROM Transaction), $3)`,
              [citizen_id, transactionData[0], transactionData[1]]
            );
          }
        }

        fakeUsers.length = 0; // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå array
        transactions.length = 0;
      }
    }

    res.json({
      message: `‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á ${count} User ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!`,
      users: insertedUsers,
    });
  } catch (err) {
    console.error("‚ùå Error generating users:", err.message);
    res
      .status(500)
      .json({ error: "‡∏™‡∏£‡πâ‡∏≤‡∏á User ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", details: err.message });
  }
});
module.exports = router;
